openapi: 3.1.0
info:
  title: Time Series Analytics Microservice API
  version: 1.0.0
paths:
  /health:
    get:
      summary: Health Check
      description: Get the health status of the kapacitor daemon.
      operationId: health_check_health_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
  /opcua_alerts:
    post:
      summary: Receive Alert
      description: "Receive and process OPC UA alerts.\n\nThis endpoint accepts alert\
        \ messages in JSON format and forwards them to the configured OPC UA client.\n\
        If the OPC UA client is not initialized, it will attempt to initialize it\
        \ using the current configuration.\n\nRequest Body Example:\n    {\n     \
        \   \"alert\": \"message\"\n    }\n\nResponses:\n    200:\n        description:\
        \ Alert received and processed successfully.\n        content:\n         \
        \   application/json:\n                example:\n                    {\n \
        \                       \"status_code\": 200,\n                        \"\
        status\": \"success\",\n                        \"message\": \"Alert received\"\
        \n                    }\n    500:\n        description: Failed to process\
        \ the alert due to server error or misconfiguration.\n        content:\n \
        \           application/json:\n                example:\n                \
        \    {\n                        \"detail\": \"Failed to initialize OPC UA\
        \ client: <error_message>\"\n                    }\n\nRaises:\n    HTTPException:\
        \ If OPC UA alerts are not configured or if there is an error during processing."
      operationId: receive_alert_opcua_alerts_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Opcua_Alerts_Message'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /input:
    post:
      summary: Receive Data
      description: "Receives a data point in JSON format, converts it to InfluxDB\
        \ line protocol, and sends it to the Kapacitor service.\n\nThe input JSON\
        \ must include:\n    - topic (str): The topic name.\n    - tags (dict): Key-value\
        \ pairs for tags (e.g., {\"location\": \"factory1\"}).\n    - fields (dict):\
        \ Key-value pairs for fields (e.g., {\"temperature\": 23.5}).\n    - timestamp\
        \ (int, optional): Epoch time in nanoseconds. If omitted, current time is\
        \ used.\n\nExample request body:\n{\n    \"topic\": \"sensor_data\",\n   \
        \ \"tags\": {\"location\": \"factory1\", \"device\": \"sensorA\"},\n    \"\
        fields\": {\"temperature\": 23.5, \"humidity\": 60},\n    \"timestamp\": 1718000000000000000\n\
        }\n\nArgs:\n    data_point (DataPoint): The data point to be processed, provided\
        \ in the request body.\nReturns:\n    dict: A status message indicating success\
        \ or failure.\nRaises:\n    HTTPException: If the Kapacitor service returns\
        \ an error or if any exception occurs during processing.\n\nresponses:\n \
        \   '200':\n    description: Data successfully sent to the Time series Analytics\
        \ microservice\n    content:\n        application/json:\n        schema:\n\
        \            type: object\n            properties:\n            status:\n\
        \                type: string\n                example: success\n        \
        \    message:\n                type: string\n                example: Data\
        \ sent to Time series Analytics microservice\n    '4XX':\n    description:\
        \ Client error (e.g., invalid input or Kapacitor error)\n    content:\n  \
        \      application/json:\n        schema:\n            $ref: '#/components/schemas/HTTPValidationError'\n\
        \    '500':\n    description: Internal server error\n    content:\n      \
        \  application/json:\n        schema:\n            type: object\n        \
        \    properties:\n            detail:\n                type: string"
      operationId: receive_data_input_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataPoint'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /config:
    get:
      summary: Get Config
      description: "Endpoint to retrieve the current configuration of the input service.\n\
        Accepts an optional 'restart' query parameter and returns the current configuration\
        \ in JSON format.\nIf 'restart=true' is provided, the Time Series Analytics\
        \ Microservice UDF deployment service will be restarted before returning the\
        \ configuration.\n\n---\nparameters:\n    - in: query\n      name: restart\n\
        \      schema:\n        type: boolean\n        default: false\n      description:\
        \ Restart the Time Series Analytics Microservice UDF deployment if true\n\
        responses:\n    200:\n        description: Current configuration retrieved\
        \ successfully\n        content:\n            application/json:\n        \
        \        schema:\n                    type: object\n                    additionalProperties:\
        \ true\n                    example:\n                        {\n        \
        \                    \"model_registry\": { \"enable\": true, \"version\":\
        \ \"2.0\" },\n                            \"udfs\": { \"name\": \"udf_name\"\
        , \"model\": \"model_name\" },\n                            \"alerts\": {}\n\
        \                        }\n    500:\n        description: Failed to retrieve\
        \ configuration\n        content:\n            application/json:\n       \
        \         schema:\n                    type: object\n                    properties:\n\
        \                        detail:\n                            type: string\n\
        \                            example: \"Failed to retrieve configuration\""
      operationId: get_config_config_get
      parameters:
      - name: restart
        in: query
        required: false
        schema:
          anyOf:
          - type: boolean
          - type: 'null'
          description: Restart the Time Series Analytics Microservice UDF deployment
            if true
          default: false
          title: Restart
        description: Restart the Time Series Analytics Microservice UDF deployment
          if true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      summary: Config File Change
      description: "Endpoint to handle configuration changes.\nThis endpoint can be\
        \ used to update the configuration of the input service.\nUpdates the configuration\
        \ of the input service with the provided key-value pairs.\n\n---\nrequestBody:\n\
        \    required: true\n    content:\n        application/json:\n           \
        \ schema:\n                type: object\n                additionalProperties:\
        \ true\n            example:\n                {\"model_registry\": {\n   \
        \                 \"enable\": true\n                    \"version\": \"2.0\"\
        \n                },\n                \"udfs\": {\n                    \"\
        name\": \"udf_name\",\n                    \"model\": \"model_name\"}\n  \
        \              \"alerts\": {\n                }\nresponses:\n    200:\n  \
        \      description: Configuration updated successfully\n        content:\n\
        \            application/json:\n                schema:\n                \
        \    type: object\n                    properties:\n                     \
        \   status:\n                            type: string\n                  \
        \          example: \"success\"\n                        message:\n      \
        \                      type: string\n                            example:\
        \ \"Configuration updated successfully\"\n    400:\n        description: Invalid\
        \ input or error processing request\n        content:\n            application/json:\n\
        \                schema:\n                    type: object\n             \
        \       properties:\n                        detail:\n                   \
        \         type: string\n                            example: \"Error message\"\
        \n    500:\n        description: Failed to write configuration to file\n \
        \       content:\n            application/json:\n                schema:\n\
        \                    type: object\n                    properties:\n     \
        \                   detail:\n                            type: string\n  \
        \                          example: \"Failed to write configuration to file\""
      operationId: config_file_change_config_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Config'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
components:
  schemas:
    Config:
      properties:
        model_registry:
          additionalProperties: true
          type: object
          title: Model Registry
          default:
            enable: false
            version: '1.0'
        udfs:
          additionalProperties: true
          type: object
          title: Udfs
          default:
            name: udf_name
        alerts:
          anyOf:
          - additionalProperties: true
            type: object
          - type: 'null'
          title: Alerts
          default: {}
      type: object
      title: Config
    DataPoint:
      properties:
        topic:
          type: string
          title: Topic
        tags:
          anyOf:
          - additionalProperties: true
            type: object
          - type: 'null'
          title: Tags
        fields:
          additionalProperties: true
          type: object
          title: Fields
        timestamp:
          anyOf:
          - type: integer
          - type: 'null'
          title: Timestamp
      type: object
      required:
      - topic
      - fields
      title: DataPoint
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          type: array
          title: Detail
      type: object
      title: HTTPValidationError
    Opcua_Alerts_Message:
      properties: {}
      additionalProperties: true
      type: object
      title: Opcua_Alerts_Message
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
            - type: string
            - type: integer
          type: array
          title: Location
        msg:
          type: string
          title: Message
        type:
          type: string
          title: Error Type
      type: object
      required:
      - loc
      - msg
      - type
      title: ValidationError
