---
openapi: 3.1.0
info:
  title: FastAPI
  version: 0.1.0
paths:
  "/v1/queue-status":
    get:
      summary: Queue Status
      description: |-
        Get the current status of the request queue.

        Returns:
            JSONResponse: A JSON response containing the number of active and queued requests.
      operationId: queue_status_v1_queue_status_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
  "/v1/chat/completions":
    post:
      summary: Chat Completions
      description: |-
        Handle chat completion requests.

        Args:
            request (ChatRequest): The chat request containing messages, model, and generation parameters.

        Returns:
            JSONResponse or StreamingResponse: The chat completion response.
      operationId: chat_completions_v1_chat_completions_post
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ChatRequest"
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
  "/v1/models":
    get:
      summary: Get Models
      description: |-
        Retrieve the list of available models.

        Returns:
            ModelsResponse: A response containing the list of available models.
      operationId: get_models_v1_models_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ModelsResponse"
  "/device":
    get:
      tags:
      - Device API
      summary: Get available device list
      description: |-
        Retrieve a list of available devices.

        Returns:
            dict: A dictionary with a key "devices" containing the list of devices.

        Raises:
            HTTPException: If an error occurs while retrieving the devices.
      operationId: get_device_device_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
  "/device/{device}":
    get:
      tags:
      - Device API
      summary: Get device property
      description: |-
        Retrieve information about a specific device.

        Args:
            device (str): The name of the device to retrieve information for.

        Returns:
            JSONResponse: A JSON response containing the properties of the specified device.

        Raises:
            HTTPException: If the device is not found or if there is an error retrieving the device properties.
      operationId: get_device_info_device__device__get
      parameters:
      - name: device
        in: path
        required: true
        schema:
          type: string
          title: Device
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
  "/health":
    get:
      summary: Health Check
      description: |-
        Perform a health check for the application.

        Returns:
            JSONResponse: A JSON response indicating the health status of the application.
      operationId: health_check_health_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
components:
  schemas:
    ChatRequest:
      properties:
        messages:
          items:
            "$ref": "#/components/schemas/Message"
          type: array
          title: Messages
        model:
          type: string
          title: Model
          example: llama-2-13b
        repetition_penalty:
          anyOf:
          - type: number
          - type: 'null'
          title: Repetition Penalty
          example: 1.15
        presence_penalty:
          anyOf:
          - type: number
          - type: 'null'
          title: Presence Penalty
          example: 1.15
        frequency_penalty:
          anyOf:
          - type: number
          - type: 'null'
          title: Frequency Penalty
          example: 1.15
        max_completion_tokens:
          anyOf:
          - type: integer
          - type: 'null'
          title: Max Completion Tokens
          example: 1000
        temperature:
          anyOf:
          - type: number
          - type: 'null'
          title: Temperature
          example: 0.3
        top_p:
          anyOf:
          - type: number
          - type: 'null'
          title: Top P
          example: 0.5
        stream:
          anyOf:
          - type: boolean
          - type: 'null'
          title: Stream
          default: false
          example: true
        top_k:
          anyOf:
          - type: integer
          - type: 'null'
          title: Top K
          example: 40
        do_sample:
          anyOf:
          - type: boolean
          - type: 'null'
          title: Do Sample
          example: true
        seed:
          anyOf:
          - type: integer
          - type: 'null'
          title: Seed
          description: Seed for reproducibility
          example: 42
      type: object
      required:
      - messages
      - model
      title: ChatRequest
      description: |-
        Represents a chat request.

        Attributes:
            messages (List[Message]): A list of messages in the chat.
            model (str): The model to be used for the chat.
            repetition_penalty (Optional[float]): The penalty for repetition.
            presence_penalty (Optional[float]): The penalty for presence.
            frequency_penalty (Optional[float]): The penalty for frequency.
            max_completion_tokens (Optional[int]): The maximum number of completion tokens.
            temperature (Optional[float]): The temperature for randomness.
            top_p (Optional[float]): The top-p sampling value.
            stream (Optional[bool]): Whether to stream the response.
            top_k (Optional[int]): The top-k sampling value.
            do_sample (Optional[bool]): Whether to sample.
            seed (Optional[int]): The seed for reproducibility.
    HTTPValidationError:
      properties:
        detail:
          items:
            "$ref": "#/components/schemas/ValidationError"
          type: array
          title: Detail
      type: object
      title: HTTPValidationError
    Message:
      properties:
        role:
          type: string
          title: Role
        content:
          anyOf:
          - type: string
          - items:
              anyOf:
              - type: string
              - "$ref": "#/components/schemas/MessageContentText"
              - "$ref": "#/components/schemas/MessageContentImageUrl"
              - "$ref": "#/components/schemas/MessageContentVideo"
              - "$ref": "#/components/schemas/MessageContentVideoUrl"
            type: array
          title: Content
      type: object
      required:
      - role
      - content
      title: Message
      description: |-
        Represents a message in a chat.

        Attributes:
            role (str): The role of the message sender (e.g., "user").
            content (Union[str, List[Union[str, MessageContentText, MessageContentImageUrl, MessageContentVideo, MessageContentVideoUrl]]]):
                The content of the message.
    MessageContentImageUrl:
      properties:
        type:
          type: string
          title: Type
        image_url:
          additionalProperties:
            type: string
          type: object
          title: Image Url
      type: object
      required:
      - type
      - image_url
      title: MessageContentImageUrl
      description: |-
        Represents an image URL message content.

        Attributes:
            type (str): The type of the content (e.g., "image_url").
            image_url (Dict[str, str]): A dictionary containing the image URL.
    MessageContentText:
      properties:
        type:
          type: string
          title: Type
        text:
          type: string
          title: Text
      type: object
      required:
      - type
      - text
      title: MessageContentText
      description: |-
        Represents a text message content.

        Attributes:
            type (str): The type of the content (e.g., "text").
            text (str): The text content.
    MessageContentVideo:
      properties:
        type:
          type: string
          title: Type
        video:
          items:
            type: string
          type: array
          title: Video
      type: object
      required:
      - type
      - video
      title: MessageContentVideo
      description: |-
        Represents a video message content.

        Attributes:
            type (str): The type of the content (e.g., "video").
            video (List[str]): A list of video frames.
    MessageContentVideoUrl:
      properties:
        type:
          type: string
          title: Type
        video_url:
          additionalProperties:
            type: string
          type: object
          title: Video Url
        max_pixels:
          anyOf:
          - type: integer
          - type: string
          - type: 'null'
          title: Max Pixels
        fps:
          anyOf:
          - type: number
          - type: 'null'
          title: Fps
      type: object
      required:
      - type
      - video_url
      title: MessageContentVideoUrl
      description: |-
        Represents a video URL message content.

        Attributes:
            type (str): The type of the content (e.g., "video_url").
            video_url (Dict[str, str]): A dictionary containing the video URL.
            max_pixels (Optional[Union[int, str]]): The maximum number of pixels for the video.
            fps (Optional[float]): The frames per second for the video.
    ModelData:
      properties:
        id:
          type: string
          title: Id
        object:
          type: string
          title: Object
          default: model
        created:
          anyOf:
          - type: integer
          - type: 'null'
          title: Created
        owned_by:
          anyOf:
          - type: string
          - type: 'null'
          title: Owned By
      type: object
      required:
      - id
      title: ModelData
      description: |-
        Represents data for a model.

        Attributes:
            id (str): The ID of the model.
            object (str): The type of the object.
            created (Optional[int]): The creation timestamp.
            owned_by (Optional[str]): The owner of the model.
    ModelsResponse:
      properties:
        object:
          type: string
          title: Object
          default: list
        data:
          items:
            "$ref": "#/components/schemas/ModelData"
          type: array
          title: Data
      type: object
      required:
      - data
      title: ModelsResponse
      description: |-
        Represents a response containing a list of models.

        Attributes:
            object (str): The type of the object.
            data (List[ModelData]): A list of model data.
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
            - type: string
            - type: integer
          type: array
          title: Location
        msg:
          type: string
          title: Message
        type:
          type: string
          title: Error Type
      type: object
      required:
      - loc
      - msg
      - type
      title: ValidationError
