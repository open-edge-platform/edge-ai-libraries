name: "[DLSPS] Coverity workflow"
run-name: "[DLSPS] Coverity  workflow (by @${{ github.actor }} via ${{ github.event_name }})"
on:
  push:
    branches:
      - 'main'
    paths:
      - 'microservices/dlstreamer-pipeline-server/**'
      
  pull_request:
    paths:
      - 'microservices/dlstreamer-pipeline-server/**'
      
  workflow_call:
permissions: {}

jobs:
  build-dls-pipeline-server-image:
    name: Build DLS Pipeline Server ${{ matrix.ubuntu_version }} img
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - ubuntu_version: ubuntu22
          
    steps:
    - name: Check out edge-ai-libraries repository
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #4.2.2
      with:
        persist-credentials: false
        path: edge-ai-libraries-repo

    - name: Init submodules
      run: |
        cd edge-ai-libraries-repo
        git submodule update --init libraries/dl-streamer/thirdparty/spdlog

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 #3.4.0
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build dls-pipeline-server-img
      run: |
        cd edge-ai-libraries-repo/microservices/dlstreamer-pipeline-server/docker
        export DLSTREAMER_PIPELINE_SERVER_IMAGE=intel/dlstreamer-pipeline-server:3.1.0-${{ matrix.ubuntu_version }}
        export DLSTREAMER_PIPELINE_SERVER_DOCKERFILE=Dockerfile
        export BASE_IMAGE="intel/dlstreamer:2025.0.1.3-ubuntu22"
        export BUILD_TARGET=gst-udf-loader
        docker compose build --no-cache --pull
  coverity-scan:
    needs: build-dls-pipeline-server-image
    runs-on: ubuntu-latest

    container:
      image: intel/dlstreamer-pipeline-server:3.1.0-ubuntu22

    steps:
      - name: Download Coverity Scan Tool
        run: |
          cd /home/pipeline-server/gst-udf-loader/
          apt update 
          apt install -y curl
          wget --quiet https://scan.coverity.com/download/linux64 \
            --post-data "token=${{ secrets.DLSPS_COVERITY_TOKEN }}&project=${{ secrets.DLSPS_COVERITY_PROJECT }}" \
            -O coverity_tool.tgz
          mkdir cov-analysis
          tar xzf coverity_tool.tgz --strip-components=1 -C cov-analysis
      - name: Build with Coverity Analysis
        run: |
          cd /home/pipeline-server/gst-udf-loader/
          /bin/bash -c "cd /home/pipeline-server/gst-udf-loader/ \
          && if [ -d \"build\" ] ; then rm -rf build ; fi \
          && mkdir build \
          && cd gst_plugin && sed -i '/dlstreamer_gst_meta/c\\\t/opt/intel/dlstreamer/build/intel64/Release/lib/libdlstreamer_gst_meta.so' CMakeLists.txt && cd .. \
          && cd build \
          && cmake -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_PREFIX}/include -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} .. \
          && ../cov-analysis/bin/cov-build --dir cov-int make" 
      - name: Create tarball for upload
        run: |
          cd /home/pipeline-server/gst-udf-loader/build
          tar czf coverity-output.tgz cov-int
      - name: Upload to Coverity Scan
        run: |
          cd libraries/dl-streamer
          curl --form token=${{ secrets.DLSPS_COVERITY_TOKEN }} \
               --form email=${{ secrets.DLSPS_COVERITY_EMAIL }} \
               --form file=@coverity-output.tgz \
               --form version="`date +%Y%m%d%H%M%S`" \
               --form description="GitHub Action upload" \
               https://scan.coverity.com/builds?project=${{ secrets.DLSPS_COVERITY_PROJECT }}

      - uses: actions/upload-artifact@v4
        with:
          name: coverity_results
          path: /home/pipeline-server/gst-udf-loader/build/coverity-output.tgz  
 