name: "[DLS] [U22/24] Build and test .deb pkgs & deb imgs"
run-name: "[DLS] [U22/24] Build and test .deb pkgs & deb imgs (by ${{ github.actor }})"
on:
  workflow_call:
  workflow_dispatch:
permissions: {}
env:
  dlstreamer-version: "2025.0.1.3"
  MODELS_PATH: "$HOME/models"
  VIDEO_INPUTS_PATH: "$HOME/videos"
  DLS_REL_PATH: "./edge-ai-libraries-repo/libraries/dl-streamer"

jobs:
  build:
    name: "[${{ matrix.runner_print_label }}] Build and test ${{ matrix.ubuntu_version }} .debs & deb imgs"
    runs-on: ${{ matrix.runner_labels }}
    permissions:
      contents: read
      packages: read
    strategy:
      fail-fast: false
      matrix:
        include:
          - path_dockerfile: $DLS_REL_PATH/docker/ubuntu/ubuntu22.Dockerfile
            ubuntu_version: ubuntu22
            runner_labels: [self-hosted, dlstreamer, TGL, ubuntu22] # Build and run tests on Tiger Lake system with Ubuntu 22
            runner_print_label: TGL
          - path_dockerfile: $DLS_REL_PATH/docker/ubuntu/ubuntu24.Dockerfile
            ubuntu_version: ubuntu24
            runner_labels: [self-hosted, dlstreamer, TGL, ubuntu24] # Build and run tests on Tiger Lake system with Ubuntu 24
            runner_print_label: TGL
          - path_dockerfile: $DLS_REL_PATH/docker/ubuntu/ubuntu24.Dockerfile
            ubuntu_version: ubuntu24
            runner_labels: [self-hosted, dlstreamer, ARL, ubuntu24] # Build and run tests on Arrow Lake system with Ubuntu 24
            runner_print_label: ARL
    steps:
    - name: Check out edge-ai-libraries repository
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #4.2.2
      with:
        persist-credentials: false
        path: edge-ai-libraries-repo

    - name: Init submodules
      run: |
        cd edge-ai-libraries-repo
        git submodule update --init libraries/dl-streamer/thirdparty/spdlog

    # ======================================================== BUILDING PART ========================================================
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 #3.10.0

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 #3.4.0
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🚢 Build deb final img with cache from GHCR
      env:
        deb_final_img: ghcr.io/${{ github.repository }}/deb-final-img-${{ matrix.ubuntu_version }}:${{ github.sha }}
        deb_final_img_cached: ghcr.io/${{ github.repository }}/deb-final-img-${{ matrix.ubuntu_version }}:buildcache
      run: |
        docker buildx build \
          --load \
          --target dlstreamer \
          --tag "${deb_final_img}" \
          --cache-from="${deb_final_img_cached}" \
          --build-arg DLSTREAMER_VERSION=${{ env.dlstreamer-version }} \
          --build-arg DLSTREAMER_BUILD_NUMBER=deb-pkg-${{ matrix.ubuntu_version }} \
          -f ${{ matrix.path_dockerfile }} \
          ${{ env.DLS_REL_PATH }}

    - name: 📦 Extract .deb packages using script
      env:
        deb_final_img: ghcr.io/${{ github.repository }}/deb-final-img-${{ matrix.ubuntu_version }}:${{ github.sha }}
      run: |
        chmod +x ${{ env.DLS_REL_PATH }}/scripts/extract_and_verify_debs.sh
        ${{ env.DLS_REL_PATH }}/scripts/extract_and_verify_debs.sh ${deb_final_img}
        ls
        cp -r deb_packages ${{ env.DLS_REL_PATH }}

    # ======================================================== SCANNING PART ========================================================
    # - name: 🔍 Scan Docker image with Trivy
    #   uses: open-edge-platform/orch-ci/.github/actions/security/trivy@5ea97eb41959d0922ab99956b4db23910f4fb4a2
    #   with:
    #     scan_target: "ghcr.io/${{ github.repository }}/deb-final-img-${{ matrix.ubuntu_version }}:${{ github.sha }}"
    #     severity: "CRITICAL"
    #     scan_type: image
    #     format: json
    #     report_suffix: "-${{ matrix.ubuntu_version }}-deb-img"
    #     scan-scope: all
    #     timeout: 20m

    # ======================================================== OH HOST TESTING PART ========================================================
    - name: Print system information
      run: |
        echo "## System information" >> $GITHUB_STEP_SUMMARY
        echo "Runner name: ${{ runner.name }}" >> $GITHUB_STEP_SUMMARY
        echo "OS Type: $(uname -o)" >> $GITHUB_STEP_SUMMARY
        echo "OS version: $(. /etc/os-release && echo "$PRETTY_NAME")" >> $GITHUB_STEP_SUMMARY
        echo "Kernel Version: $(uname -r)" >> $GITHUB_STEP_SUMMARY
        echo "CPU Name: $(lscpu | grep 'Model name' | sed 's/Model name:[ \t]*//')" >> $GITHUB_STEP_SUMMARY

    - name: Check models
      run: |
        echo "## Basic checks" >> $GITHUB_STEP_SUMMARY
        if [ -d "${{ env.MODELS_PATH }}" ] && [ "$(ls -A "${{ env.MODELS_PATH }}")" ]; then
          echo "Models: found ✅" >> $GITHUB_STEP_SUMMARY
        else
          echo "Models: folder not found or it is empty ❌" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi

    - name: Check videos
      run: |
        if [ -d "${{ env.VIDEO_INPUTS_PATH }}" ] && [ "$(ls -A "${{ env.VIDEO_INPUTS_PATH }}")" ]; then
          echo "Tests input videos: found ✅" >> $GITHUB_STEP_SUMMARY
        else
          echo "Tests input videos: folder not found or it is empty ❌" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi

    - name: Install DL Streamer on-host
      run: |
        $DLS_REL_PATH/tests/scripts/installation-on-host-entrypoint.sh $DLS_REL_PATH/deb_packages

    - name: 👋 Test hello_dlstreamer script
      id: test_hello_dlstreamer_script
      run: |
        mkdir -p $DLS_REL_PATH/test_hello_dlstreamer
        cd $DLS_REL_PATH/test_hello_dlstreamer
        export MODELS_PATH=${{ env.MODELS_PATH }}
        echo "Running hello_dlstreamer.sh on CPU with model yolo11s"
        /opt/intel/dlstreamer/scripts/hello_dlstreamer.sh --output=file --device=CPU --model=yolo11s --precision=INT8
        OUTPUT_FILE_FOUND=0
        for file in *.mp4; do
            # Check if the file exists and is at least 1kB in size
            if [[ -f "$file" && $(stat --printf="%s" "$file") -ge 1024 ]]; then
                echo "✅ Valid .mp4 file found: $file"
                echo "Testing hello_dlstreamer.sh script: PASS ✅" >> $GITHUB_STEP_SUMMARY
                OUTPUT_FILE_FOUND=1
            fi
        done
        if [[ $OUTPUT_FILE_FOUND -eq 0 ]]; then
            echo "❌ No .mp4 file(s) found or it has less than 1kB size. Exiting..."
            echo "Testing hello_dlstreamer.sh script: FAIL ❌" >> $GITHUB_STEP_SUMMARY
            exit 1
        fi

    - name: Upload hello_dlstreamer output video
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 #4.6.2
      if: steps.test_hello_dlstreamer_script.outcome == 'success'
      with:
        name: hello_dlstreamer_output_video_${{ matrix.runner_print_label }}_${{ matrix.ubuntu_version }}_CPU_yolo11s
        path: ${{ env.DLS_REL_PATH }}/test_hello_dlstreamer

    - name: Init tests configurations
      run: |
        if [[ ${{ matrix.runner_print_label }} == "TGL" ]]; then
          echo "TEST_CONFIGS=on_host/samples_TGL.json" >> $GITHUB_ENV
          echo "Selected test configuration file: on_host/samples_TGL.json ✅" >> $GITHUB_STEP_SUMMARY
        elif [[ ${{ matrix.runner_print_label }} == "ARL" ]]; then
          echo "TEST_CONFIGS=on_host/samples_ARL.json" >> $GITHUB_ENV
          echo "Selected test configuration file: on_host/samples_ARL.json ✅" >> $GITHUB_STEP_SUMMARY
        else
          echo "Test configuration file: not found ❌" >> $GITHUB_STEP_SUMMARY
          echo "❌ Cannot assign correct test configuration JSON file for runner based on label: ${{ matrix.runner_print_label }}"
          echo "Please review and fix! Exiting..."
          exit 1
        fi

    - name: Init test environemtnt
      run: |
        sudo apt install libcairo2-dev libgirepository1.0-dev
        if [ -d "$HOME/.virtualenvs" ]; then
          echo "Directory $HOME/.virtualenvs exists - removing it"
          rm -rf $HOME/.virtualenvs
        fi
        mkdir -p $HOME/.virtualenvs/dlstreamer
        python3 -m venv $HOME/.virtualenvs/dlstreamer
        $HOME/.virtualenvs/dlstreamer/bin/pip install --no-cache-dir --upgrade pip -r $DLS_REL_PATH/requirements.txt

    - name: Link DL Streamer to home directory
      run: |
        ln -s $PWD/$DLS_REL_PATH $HOME

    - name: 🚀 Run tests
      id: run_tests
      run: |
        cd $DLS_REL_PATH/tests
        mkdir functional_tests_results
        cd functional_tests_results
        DLS_TESTS_RESULTS_PATH=$PWD
        echo "DLS_TESTS_RESULTS_PATH=$DLS_TESTS_RESULTS_PATH" >> $GITHUB_ENV
        cd ../functional_tests

        echo "Starting to execute FUNCTIONAL TESTS main sctipt"
        source $HOME/.virtualenvs/dlstreamer/bin/activate
        ./run_tests.sh --models-path=${{ env.MODELS_PATH }} --video-examples-path=${{ env.VIDEO_INPUTS_PATH }} --test-configs="${{ env.TEST_CONFIGS }}" --results-path="$DLS_TESTS_RESULTS_PATH" --report-name=functional_tests_${{ matrix.runner_print_label }}_on_host_${{ matrix.ubuntu_version }}_results --on-host

        cd ../..
        mkdir /home/runner/test_videos
        cp -r * /home/runner/test_videos

    - name: Upload test results
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 #4.6.2
      if: steps.run_tests.outcome == 'success'
      with:
        name: functional_tests_${{ matrix.runner_print_label }}_on_host_${{ matrix.ubuntu_version }}_results
        path: "${{ env.DLS_TESTS_RESULTS_PATH }}"

    - name: Print tests summary in workflow
      if: steps.run_tests.outcome == 'success'
      run: |
        echo "## Tests summary" >> $GITHUB_STEP_SUMMARY
        sed 's/\[pass\]/:white_check_mark:/g; s/\[\! FAIL \!\]/:x:/g' "${{ env.DLS_TESTS_RESULTS_PATH }}"/functional_tests_${{ matrix.runner_print_label }}_on_host_${{ matrix.ubuntu_version }}_results.txt >> $GITHUB_STEP_SUMMARY

    - name: Uninstall dlstreamer
      if: always ()
      run: |
        $DLS_REL_PATH/tests/scripts/uninstall-dlstreamer.sh

    # ======================================================== CLEAUP PART ========================================================
    - name: Clean up
      env:
        deb_final_img: ghcr.io/${{ github.repository }}/deb-final-img-${{ matrix.ubuntu_version }}:${{ github.sha }}
      if: always()
      run: |
        rm -rf $HOME/.virtualenvs
        docker rmi ${deb_img} || true
        sudo rm -f $HOME/dl-streamer
        rm -rf edge-ai-libraries-repo
