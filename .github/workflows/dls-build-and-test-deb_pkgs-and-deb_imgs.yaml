name: "[DLS] [U22/24] Build and test .deb pkgs & deb imgs"
run-name: "[DLS] [U22/24] Build and test .deb pkgs & deb imgs (by ${{ github.actor }})"
on:
  workflow_call:
  workflow_dispatch:
permissions: {}
env:
  dlstreamer-version: "2025.0.1.3"
  MODELS_PATH: $HOME/models
  VIDEO_INPUTS_PATH: $HOME/videos

jobs:
  build:
    name: Build and test ${{ matrix.ubuntu_version }} .debs & deb imgs
    runs-on: ${{ matrix.runner_labels }}
    permissions:
      contents: read
      packages: read
    strategy:
      fail-fast: false
      matrix:
        include:
          - path_deb: ./edge-ai-libraries-repo/libraries/dl-streamer/docker/onebinary/ubuntu22/dlstreamer_deb_package_ubuntu22.Dockerfile
            path_dev: ./edge-ai-libraries-repo/libraries/dl-streamer/docker/devel/ubuntu22/dlstreamer_dev_ubuntu22.Dockerfile
            ubuntu_version: ubuntu22
            runner_labels: [ubuntu-latest] # Build and run tests on Tiger Lake system with Ubuntu 22
          - path_deb: ./edge-ai-libraries-repo/libraries/dl-streamer/docker/onebinary/ubuntu24/dlstreamer_deb_package_ubuntu24.Dockerfile
            path_dev: ./edge-ai-libraries-repo/libraries/dl-streamer/docker/devel/ubuntu24/dlstreamer_dev_ubuntu24.Dockerfile
            ubuntu_version: ubuntu24
            runner_labels: [ubuntu-latest] # Build and run tests on Tiger Lake system with Ubuntu 24
          - path_deb: ./edge-ai-libraries-repo/libraries/dl-streamer/docker/onebinary/ubuntu24/dlstreamer_deb_package_ubuntu24.Dockerfile
            path_dev: ./edge-ai-libraries-repo/libraries/dl-streamer/docker/devel/ubuntu24/dlstreamer_dev_ubuntu24.Dockerfile
            ubuntu_version: ubuntu24
            runner_labels: [ubuntu-latest] # Build and run tests on Arrow Lake system with Ubuntu 24
    steps:
    - name: Check out edge-ai-libraries repository
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #4.2.2
      with:
        persist-credentials: false
        path: edge-ai-libraries-repo

    - name: Init submodules
      run: |
        cd edge-ai-libraries-repo
        git submodule update --init libraries/dl-streamer/thirdparty/spdlog

    - name: Prune unused Docker containers and networks
      run: |
        docker system prune -af --volumes

    # ======================================================== BUILDING PART ========================================================
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 #3.10.0

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 #3.4.0
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build dev release img with cache from GHCR
      env:
        dev_release_img: ghcr.io/${{ github.repository }}/dev-release-img-${{ matrix.ubuntu_version }}:${{ github.sha }}
        dev_release_img_cached: ghcr.io/${{ github.repository }}/dev-release-img-${{ matrix.ubuntu_version }}:buildcache
      run: |
        docker buildx build \
          --load \
          --tag "${dev_release_img}" \
          --cache-from="${dev_release_img_cached}" \
          --build-arg BUILD_ARG=Release \
          -f ${{ matrix.path_dev }} \
          ./edge-ai-libraries-repo/libraries/dl-streamer

    - name: Build deb pkg img using dev release img
      env:
        dev_release_img: ghcr.io/${{ github.repository }}/dev-release-img-${{ matrix.ubuntu_version }}:${{ github.sha }}
        deb_pkg_img: ghcr.io/${{ github.repository }}/dls-deb-pkg-${{ matrix.ubuntu_version }}:${{ github.sha }}
      run: |
        docker build \
          --tag ${deb_pkg_img} \
          --build-arg DLSTREAMER_VERSION=${{ env.dlstreamer-version }} \
          --build-arg DLSTREAMER_BUILD_NUMBER=deb-pkg-${{ matrix.ubuntu_version }} \
          --build-arg BASE_IMAGE="${dev_release_img}" \
          -f ${{ matrix.path_deb }} \
          ./edge-ai-libraries-repo/libraries/dl-streamer

    - name: Extract .deb packages using script
      env:
        deb_pkg_img: ghcr.io/${{ github.repository }}/dls-deb-pkg-${{ matrix.ubuntu_version }}:${{ github.sha }}
      run: |
        chmod +x ./edge-ai-libraries-repo/libraries/dl-streamer/scripts/extract_and_verify_debs.sh
        ./edge-ai-libraries-repo/libraries/dl-streamer/scripts/extract_and_verify_debs.sh ${deb_pkg_img}
        ls
        cp -r deb_packages ./edge-ai-libraries-repo/libraries/dl-streamer

    - name: Build Docker img from .deb
      env:
        deb_img: ghcr.io/${{ github.repository }}/dls-deb-${{ matrix.ubuntu_version }}:${{ github.sha }}
      run: |
        docker build \
          -t ${deb_img} \
          -f ./edge-ai-libraries-repo/libraries/dl-streamer/docker/onebinary/${{ matrix.ubuntu_version }}/dlstreamer_${{ matrix.ubuntu_version }}.Dockerfile \
          ./edge-ai-libraries-repo/libraries/dl-streamer

    - name: Remove Docker images
      env:
        deb_pkg_img: ghcr.io/${{ github.repository }}/dls-deb-pkg-${{ matrix.ubuntu_version }}:${{ github.sha }}
        dev_release_img: ghcr.io/${{ github.repository }}/dev-release-img-${{ matrix.ubuntu_version }}:${{ github.sha }}
      run: docker rmi ${dev_release_img} ${deb_pkg_img} || true

    # ======================================================== SCANNING PART ========================================================
    - name: Scan Docker image with Trivy
      uses: ./edge-ai-libraries-repo/.github/actions/common/trivy-image-scan
      with:
        image: "ghcr.io/${{ github.repository }}/dls-deb-${{ matrix.ubuntu_version }}:${{ github.sha }}"
        severity: "CRITICAL"
        # output-format: "json"
        output-file: "dls-deb-${{ matrix.ubuntu_version }}-trivy-image-report.txt"

    - name: Upload Trivy report as artifact
      if: always()
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 #4.6.2
      with:
        name: dls-deb-${{ matrix.ubuntu_version }}-trivy-image-report
        path: dls-deb-${{ matrix.ubuntu_version }}-trivy-image-report.txt

    # ======================================================== OH HOST TESTING PART ========================================================
    - name: Download models
      run: |
        export MODELS_PATH=${{ env.MODELS_PATH }}
        ./edge-ai-libraries-repo/libraries/dl-streamer/samples/download_public_models.sh

    - name: Check videos
      run: |
        if [ -d "${{ env.VIDEO_INPUTS_PATH }}" ] && [ "$(ls -A "${{ env.VIDEO_INPUTS_PATH }}")" ]; then
          echo "Folder "${{ env.VIDEO_INPUTS_PATH }}" with video inputs exists and has content."
        else
          echo "Folder "${{ env.VIDEO_INPUTS_PATH }}" with video inputs DOES NOT EXIST or is empty."
        fi

    - name: Install DL Streamer on-host

    - name: Init tests configurations and environment
      run: |
        echo "TODO"

    - name: Run tests
      run: |
        echo "TODO"

    - name: Upload test results
      run: |
        echo "TODO"

    # ======================================================== CLEAUP PART ========================================================
    - name: Clean up
      env:
        deb_img: ghcr.io/${{ github.repository }}/dls-deb-${{ matrix.ubuntu_version }}:${{ github.sha }}
      if: always()
      run: |
        rm -rf edge-ai-libraries-repo dls-deb-${{ matrix.ubuntu_version }}-trivy-image-report.txt
        docker rmi ${deb_img} || true
