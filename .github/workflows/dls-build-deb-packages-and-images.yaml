name: "[DLS] [U22/24] Build .deb pkg and img"
run-name: "[DLS] [U22/24] Build .deb pkg and img (by ${{ github.actor }})"
on:
  workflow_call:
    inputs:
      dev-img:
        description: "Dev img"
        required: true
        type: string
permissions:
  packages: read
  contents: read

jobs:
  build:
    name: Build ${{ matrix.ubuntu_version }} .deb and img
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - path: ./edge-ai-libraries-repo/libraries/dl-streamer/docker/onebinary/ubuntu22/dlstreamer_deb_package_ubuntu22.Dockerfile
            ubuntu_version: ubuntu22
          - path: ./edge-ai-libraries-repo/libraries/dl-streamer/docker/onebinary/ubuntu24/dlstreamer_deb_package_ubuntu24.Dockerfile
            ubuntu_version: ubuntu24
    steps:
    - name: Check out edge-ai-libraries repository
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #4.2.2
      with:
        path: edge-ai-libraries-repo

    - name: Init submodules
      run: |
        cd edge-ai-libraries-repo
        git submodule update --init libraries/dl-streamer/thirdparty/spdlog

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 #3.10.0

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 #3.4.0
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build deb pkg img using dev img
      run: |
        if [ -z "${{ inputs.dev-img }}" ]; then
          echo "Error: 'dev-img' input is required."
          exit 1
        fi

        docker build \
          --tag ghcr.io/${{ github.repository }}/dls-deb-pkg-${{ matrix.ubuntu_version }}:${{ github.sha }} \
          --build-arg DLSTREAMER_VERSION=2025.0.1.3 \
          --build-arg DLSTREAMER_BUILD_NUMBER=deb-pkg-${{ matrix.ubuntu_version }} \
          --build-arg BASE_IMAGE=${{ inputs.dev-img }} \
          -f ${{ matrix.path }} \
          ./edge-ai-libraries-repo/libraries/dl-streamer

    - name: Extract .deb packages using script
      run: |
        chmod +x ./edge-ai-libraries-repo/libraries/dl-streamer/scripts/build_deb_packages.sh
        ./edge-ai-libraries-repo/libraries/dl-streamer/scripts/build_deb_packages.sh ghcr.io/${{ github.repository }}/dls-deb-pkg-${{ matrix.ubuntu_version }}:${{ github.sha }}

    - name: Build Docker img from .deb
      run: |
        docker build -t dls-img/${{ github.repository }}/dls-deb-${{ matrix.ubuntu_version }}:${{ github.sha }} -f ./edge-ai-libraries-repo/libraries/dl-streamer/docker/onebinary/${{ matrix.ubuntu_version }}/dlstreamer_${{ matrix.ubuntu_version }}.Dockerfile ./edge-ai-libraries-repo/libraries/dl-streamer

    - name: Clean up
      if: always()
      run: |
        rm -rf edge-ai-libraries-repo
        docker rmi dls-img/${{ github.repository }}/deb-${{ matrix.ubuntu_version }}:${{ github.sha }} || true
