#
# Apache v2 license
# Copyright (C) 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
#
name: "[Model Registry] PR workflow"
run-name: "[Model Registry] PR  workflow (by @${{ github.actor }} via ${{ github.event_name }})"
on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'microservices/model-registry/**'
  pull_request:
    paths:
      - 'microservices/model-registry/**'

jobs:
  modelregistry-unit-tests:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          cd microservices/model-registry
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f tests/requirements-tests.txt ]; then pip install -r tests/requirements-tests.txt; fi

      - name: Run tests
        id: run_tests
        run: |
          echo "Running unit tests"
          cd microservices/model-registry
          if [ -d tests ]; then PYTEST_OUTPUT=$(pytest -vv --cov=src --cov-report=term-missing --cov-report=xml:coverage.xml tests/unit_tests/ 2>&1 || true)
          # echo "$PYTEST_OUTPUT"
          echo "$PYTEST_OUTPUT" > pytest_results.txt
          echo "run_pytest_raw_output<<EOF" >> $GITHUB_OUTPUT
          echo "$PYTEST_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT; fi
          pwd
          ls
        env:
          PYTHONPATH: "${{ github.workspace }}/microservices/model-registry/src"
      - name: Parse Pytest Results
        id: extract_summary
        run: |
          echo "${{ steps.run_tests.outputs.run_pytest_raw_output }}" > pytest_output.txt

          # Extract coverage percentage (e.g., 95%)
          COVERAGE=$(awk '/^TOTAL/{print $4; exit}' pytest_output.txt)

          # Extract passed and failed test counts
          PASSED=$(grep -oP '\d+(?= passed)' pytest_output.txt | head -n1)
          if [ -z "$PASSED" ]; then
            PASSED="0"
          fi
          
          FAILED=$(grep -oP '\d+(?= failed)' pytest_output.txt | head -n1)
          if [ -z "$FAILED" ]; then
            FAILED="0"
          fi

          # Output to screen
          echo "Coverage: $COVERAGE"
          echo "Passed: $PASSED"
          echo "Failed: $FAILED"

          # Output to file
          echo "Coverage: $COVERAGE" > pytest_summary.txt
          echo "Passed: $PASSED" >> pytest_summary.txt
          echo "Failed: $FAILED" >> pytest_summary.txt
          pwd
          ls -laR ${{ github.workspace }}
        env:
          run_pytest_raw_output: ${{ steps.run_tests.outputs.run_pytest_raw_output }}
      - name: Upload Pytest Results Files
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results
          path: |
            ${{ github.workspace }}/microservices/model-registry/pytest_results.txt
            ${{ github.workspace }}/pytest_summary.txt
            ${{ github.workspace }}/microservices/model-registry/coverage.xml