name: "[DLS] Unit tests"
run-name: "[DLS] Unit tests on (${{ inputs.image}})" 
on:
  workflow_call:
    inputs:
      image:
        description: "Source-based Docker image"
        required: true
        type: string
permissions: {}
env:
  dlstreamer-version: "2025.0.1.3"
  MODELS_PATH: "$HOME/models"
  VIDEO_INPUTS_PATH: "$HOME/videos"

jobs:
  unit-tests:
    name: Unit tests
    runs-on: TGL
    permissions:
      contents: read
      packages: read
    steps:
    - name: Print system information
      run: |
        echo "## System information" >> $GITHUB_STEP_SUMMARY
        echo "Runner name: ${{ runner.name }}" >> $GITHUB_STEP_SUMMARY
        echo "OS Type: $(uname -o)" >> $GITHUB_STEP_SUMMARY
        echo "OS version: $(. /etc/os-release && echo "$PRETTY_NAME")" >> $GITHUB_STEP_SUMMARY
        echo "Kernel Version: $(uname -r)" >> $GITHUB_STEP_SUMMARY
        echo "CPU Name: $(lscpu | grep 'Model name' | sed 's/Model name:[ \t]*//')" >> $GITHUB_STEP_SUMMARY

    - name: Check models
      run: |
        echo "## Basic checks" >> $GITHUB_STEP_SUMMARY
        if [ -d "${{ env.MODELS_PATH }}" ] && [ "$(ls -A "${{ env.MODELS_PATH }}")" ]; then
          echo "Models: found ✅" >> $GITHUB_STEP_SUMMARY
        else
          echo "Models: folder not found or it is empty ❌" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi

    - name: Check videos
      run: |
        if [ -d "${{ env.VIDEO_INPUTS_PATH }}" ] && [ "$(ls -A "${{ env.VIDEO_INPUTS_PATH }}")" ]; then
          echo "Tests input videos: found ✅" >> $GITHUB_STEP_SUMMARY
        else
          echo "Tests input videos: folder not found or it is empty ❌" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi

    - name: Check out edge-ai-libraries repository
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #4.2.2
      with:
        persist-credentials: false

    - name: Init submodules
      run: |
        git submodule update --init libraries/dl-streamer/thirdparty/spdlog

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 #3.10.0

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 #3.4.0
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build dev debug img with cache from GHCR
      env:
        dev_debug_img: ghcr.io/${{ github.repository }}/dev-debug-img-${{ matrix.ubuntu_version }}:${{ github.sha }}
        dev_debug_img_cached: ghcr.io/${{ github.repository }}/dev-debug-img-${{ matrix.ubuntu_version }}:buildcache
      run: |
        docker buildx build \
          --load \
          --target dlstreamer-dev \
          --tag "${dev_debug_img}" \
          --cache-from="${dev_debug_img_cached}" \
          --build-arg BUILD_ARG=Debug \
          -f ${{ matrix.path_dockerfile }} \
          ./libraries/dl-streamer

    - name: Create test results folder
      env:
        RESULTS_DIR: test-results
      run: | 
        mkdir -p ${RESULTS_DIR}
        chmod -R 777 ${RESULTS_DIR}   

    - name: Run tests
      id: run-tests
      env:
        MAPPED_MODELS_PATH: /home/dlstreamer/models
        MAPPED_RESULTS_DIR: /home/dlstreamer/test-results
        MAPPED_VIDEO_EXAMPLES_DIR: /home/dlstreamer/video-examples
        MODELS_PATH: "$HOME/models"
        VIDEO_INPUTS_PATH: "$HOME/videos"
        RESULTS_DIR: test-results
      run: |
        docker run --device /dev/dri --rm \
          --group-add=$(stat -c "%g" /dev/dri/render*) \
          -v ${VIDEO_INPUTS_PATH}:${MAPPED_VIDEO_EXAMPLES_DIR} \
          -v ${MODELS_PATH}:${MAPPED_MODELS_PATH} \
          -v $PWD/${RESULTS_DIR}:${MAPPED_RESULTS_DIR}        \
          -v $PWD/libraries/dl-streamer/tests/scripts:/home/dlstreamer/dlstreamer/scripts  \
          -e VIDEO_EXAMPLES_DIR=${MAPPED_VIDEO_EXAMPLES_DIR}  \
          -w /home/dlstreamer/dlstreamer  \
          -e MODELS_PATH=${MAPPED_MODELS_PATH}                \
          -e MODELS_PROC_PATH=/home/dlstreamer/dlstreamer/samples/gstreamer/model_proc \
          ${{ inputs.image }} \
          scripts/run_tests.sh "" "" ${MAPPED_RESULTS_DIR}

    #this script creates output file called unit_test_summary.txt
    - name: Run python script to get Unit Test results
      run: python3 libraries/dl-streamer/tests/scripts/unit_test_results.py $PWD/${RESULTS_DIR}

    - name: Add test summary to job summary
      if: always ()
      env:
        RESULTS_DIR: test-results
      run: |
        echo "## Test Summary for Unit Tests on TGL" >> $GITHUB_STEP_SUMMARY
        cat $PWD/${RESULTS_DIR}/unit_test_summary.txt >> $GITHUB_STEP_SUMMARY

    - name: Upload test results
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 #4.6.2
      if: always ()
      env:
        RESULTS_DIR: test-results
      with:
        name: unit_tests_tgl
        path: ${{ env.RESULTS_DIR }}/*.xml

    - name: Clean up
      if: always ()
      env:
        RESULTS_DIR: test-results
      run: rm -rf ${RESULTS_DIR}