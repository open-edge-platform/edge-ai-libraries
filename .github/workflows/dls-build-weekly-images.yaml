name: "[DLS] [U22/U24] Build weekly imgs"
run-name: "[DLS] [U22/U24] Build weekly imgs"
on:
  schedule:
    - cron: '0 14 * * 2' # 14:00 UTC
  workflow_dispatch:
permissions: {}
env:
  dlstreamer-version: "2025.0.1.3"
  DLS_REL_PATH: "./libraries/dl-streamer"
  
jobs:
  build-dls-deb-img:
    name: Build DLS ${{ matrix.ubuntu_version }} .deb and deb img
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - path_dockerfile: ./libraries/dl-streamer/docker/ubuntu/ubuntu22.Dockerfile
            ubuntu_version: ubuntu22
          - path_dockerfile: ./libraries/dl-streamer/docker/ubuntu/ubuntu24.Dockerfile
            ubuntu_version: ubuntu24
    outputs:
      ubuntu22_image: ${{ steps.save-image-ubuntu22.outputs.image }}
      ubuntu24_image: ${{ steps.save-image-ubuntu24.outputs.image }}
    steps:
    - name: Check out edge-ai-libraries repository
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #4.2.2
      with:
        persist-credentials: false

    - name: Init submodules
      run: |
        git submodule update --init libraries/dl-streamer/thirdparty/spdlog

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 #3.10.0

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 #3.4.0
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build deb final img with cache from GHCR
      env:
        deb_final_img: ghcr.io/${{ github.repository }}/deb-final-img-${{ matrix.ubuntu_version }}:latest
        deb_final_img_cached: ghcr.io/${{ github.repository }}/deb-final-img-${{ matrix.ubuntu_version }}:buildcache
      run: |
        docker buildx build \
          --push \
          --target dlstreamer \
          --tag "${deb_final_img}" \
          --cache-to=type=registry,ref=${deb_final_img_cached},mode=max \
          --cache-from="${deb_final_img_cached}" \
          --build-arg DLSTREAMER_VERSION=${{ env.dlstreamer-version }} \
          --build-arg DLSTREAMER_BUILD_NUMBER=deb-pkg-${{ matrix.ubuntu_version }} \
          -f ${{ matrix.path_dockerfile }} \
          ${{ env.DLS_REL_PATH }}

    # ======================================================== SCANNING PART ========================================================
    - name: 🔍 Scan Docker image with Trivy
      uses: open-edge-platform/orch-ci/.github/actions/security/trivy@65fc743e0c69b8529188b89dede3acfe2897b2e0
      with:
        scan_target: "ghcr.io/${{ github.repository }}/deb-final-img-${{ matrix.ubuntu_version }}:latest"
        severity: "HIGH"
        scan_type: image
        format: table
        report_suffix: "-${{ matrix.ubuntu_version }}-deb-img"
        scan-scope: all
        timeout: 20m
        ignore_unfixed: true

    - name: Fail if vulnerabilities > 0 in Trivy results
      run: |
        file=$(ls security-results/trivy/trivy-results-* | head -n 1)
        cat $file
        vuln_count=$(awk '/│/ && /Vulnerabilities/ {next} /│/ {gsub(/ /, "", $0); split($0, cols, "│"); print cols[4]}' "$file" | grep -v '-' | head -n 1)

        echo "Found vulnerability count: $vuln_count"

        if [[ "$vuln_count" != "0" ]]; then
          echo "❌ Vulnerabilities found: $vuln_count"
          exit 1
        else
          echo "✅ No vulnerabilities found."
        fi
      shell: bash

    - name: Install Cosign
      uses: sigstore/cosign-installer@398d4b0eeef1380460a10c8013a76f728fb906ac # v3.9.1

    - name: Sign Docker image using Cosign (keyless)
      env:
        deb_final_img: ghcr.io/${{ github.repository }}/deb-final-img-${{ matrix.ubuntu_version }}:latest
      run: |
        cosign sign ${deb_final_img}

    - name: Save Ubuntu 22 image info
      id: save-image-ubuntu22
      if: ${{ matrix.ubuntu_version == 'ubuntu22' }}
      run: echo "image=ghcr.io/${{ github.repository }}/deb-final-img-${{ matrix.ubuntu_version }}:latest" >> "$GITHUB_OUTPUT"

    - name: Save Ubuntu 24 image info
      id: save-image-ubuntu24
      if: ${{ matrix.ubuntu_version == 'ubuntu24' }}
      run: echo "image=ghcr.io/${{ github.repository }}/deb-final-img-${{ matrix.ubuntu_version }}:latest" >> "$GITHUB_OUTPUT"

    - name: Clean up
      if: always()
      run: |
        rm -rf edge-ai-libraries-repo
        docker rmi ghcr.io/${{ github.repository }}/deb-final-img-${{ matrix.ubuntu_version }}:latest || true

  build-dls-dev-img:
    name: Build DLS ${{ matrix.ubuntu_version }} dev debug img
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - path_dockerfile: ./libraries/dl-streamer/docker/ubuntu/ubuntu22.Dockerfile
            ubuntu_version: ubuntu22
            build_arg: Debug
          - path_dockerfile: ./libraries/dl-streamer/docker/ubuntu/ubuntu24.Dockerfile
            ubuntu_version: ubuntu24
            build_arg: Debug
    steps:
    - name: Check out edge-ai-libraries repository
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #4.2.2
      with:
        persist-credentials: false
  
    - name: Init submodules
      run: |
        git submodule update --init libraries/dl-streamer/thirdparty/spdlog

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 #3.10.0

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 #3.4.0
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build dev debug img with cache from GHCR
      env:
        dev_debug_img: ghcr.io/${{ github.repository }}/dev-debug-img-${{ matrix.ubuntu_version }}:latest
        dev_debug_img_cached: ghcr.io/${{ github.repository }}/dev-debug-img-${{ matrix.ubuntu_version }}:buildcache
      run: |
        docker buildx build \
          --push \
          --target dlstreamer-dev \
          --tag "${dev_debug_img}" \
          --cache-from=type=registry,ref=${dev_debug_img_cached} \
          --cache-to=type=registry,ref=${dev_debug_img_cached},mode=max \
          --build-arg BUILD_ARG=${{ matrix.build_arg }} \
          -f ${{ matrix.path_dockerfile }} \
          ./libraries/dl-streamer

    # ======================================================== SCANNING PART ========================================================
    - name: Scan Docker image with Trivy
      uses: open-edge-platform/orch-ci/.github/actions/security/trivy@65fc743e0c69b8529188b89dede3acfe2897b2e0
      with:
        scan_target: "ghcr.io/${{ github.repository }}/dev-debug-img-${{ matrix.ubuntu_version }}:latest"
        severity: "HIGH"
        scan_type: image
        format: table
        report_suffix: ${{ matrix.ubuntu_version }}-dev-img
        scan-scope: all
        timeout: 20m
        ignore_unfixed: true

    - name: Fail if vulnerabilities > 0 in Trivy results
      run: |
        file=$(ls security-results/trivy/trivy-results-* | head -n 1)
        cat $file
        vuln_count=$(awk '/│/ && /Vulnerabilities/ {next} /│/ {gsub(/ /, "", $0); split($0, cols, "│"); print cols[4]}' "$file" | grep -v '-' | head -n 1)

        echo "Found vulnerability count: $vuln_count"

        if [[ "$vuln_count" != "0" ]]; then
          echo "❌ Vulnerabilities found: $vuln_count"
          exit 1
        else
          echo "✅ No vulnerabilities found."
        fi
      shell: bash

    - name: Install Cosign
      uses: sigstore/cosign-installer@398d4b0eeef1380460a10c8013a76f728fb906ac # v3.9.1

    - name: Sign Docker image using Cosign (keyless)
      env:
        dev_debug_img: ghcr.io/${{ github.repository }}/dev-debug-img-${{ matrix.ubuntu_version }}:latest
      run: |
        cosign sign ${dev_debug_img}

    - name: Clean up
      if: always()
      run: |
        rm -rf edge-ai-libraries-repo
        docker rmi ghcr.io/${{ github.repository }}/dev-debug-img-${{ matrix.ubuntu_version }}:latest || true

  build-dls-pipeline-server-image:
    needs: build-dls-deb-img
    name: Build DLS Pipeline Server ${{ matrix.ubuntu_version }} img
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - ubuntu_version: ubuntu22
          - ubuntu_version: ubuntu24
    steps:
    - name: Check out edge-ai-libraries repository
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #4.2.2
      with:
        persist-credentials: false
        path: edge-ai-libraries-repo

    - name: Init submodules
      run: |
        cd edge-ai-libraries-repo
        git submodule update --init libraries/dl-streamer/thirdparty/spdlog

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 #3.4.0
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set BASE_IMAGE
      env:
        BASE_IMAGE22: ${{ needs.build-dls-deb-img.outputs.ubuntu22_image }}
        BASE_IMAGE24: ${{ needs.build-dls-deb-img.outputs.ubuntu24_image }}
      run: |
        if [ "${{ matrix.ubuntu_version }}" == "ubuntu22" ]; then
          echo "BASE_IMAGE=${BASE_IMAGE22}" >> $GITHUB_ENV
        elif [ "${{ matrix.ubuntu_version }}" == "ubuntu24" ]; then
          echo "BASE_IMAGE=${BASE_IMAGE24}" >> $GITHUB_ENV
        fi

    - name: Build dls-pipeline-server-img
      run: |
        cd edge-ai-libraries-repo/microservices/dlstreamer-pipeline-server/docker
        export DLSTREAMER_PIPELINE_SERVER_IMAGE=ghcr.io/${{ github.repository }}/intel/dlstreamer-pipeline-server:latest-${{ matrix.ubuntu_version }}
        export DLSTREAMER_PIPELINE_SERVER_DOCKERFILE=Dockerfile
        docker compose build --no-cache --pull

    # ======================================================== SCANNING PART ========================================================
    - name: Scan Docker image with Trivy
      uses: open-edge-platform/orch-ci/.github/actions/security/trivy@65fc743e0c69b8529188b89dede3acfe2897b2e0
      with:
        scan_target: "ghcr.io/${{ github.repository }}/intel/dlstreamer-pipeline-server:latest-${{ matrix.ubuntu_version }}"
        severity: "HIGH"
        scan_type: image
        format: table
        report_suffix: ${{ matrix.ubuntu_version }}-dlstreamer-pipeline-server
        scan-scope: all
        timeout: 20m
        ignore_unfixed: true

    - name: Fail if vulnerabilities > 0 in Trivy results
      run: |
        file=$(ls security-results/trivy/trivy-results-* | head -n 1)
        cat $file
        vuln_count=$(awk '/│/ && /Vulnerabilities/ {next} /│/ {gsub(/ /, "", $0); split($0, cols, "│"); print cols[4]}' "$file" | grep -v '-' | head -n 1)

        echo "Found vulnerability count: $vuln_count"

        if [[ "$vuln_count" != "0" ]]; then
          echo "❌ Vulnerabilities found: $vuln_count"
          exit 1
        else
          echo "✅ No vulnerabilities found."
        fi
      shell: bash

    - name: Push Docker img
      run: |
        if [ "${{ matrix.ubuntu_version }}" == "ubuntu24" ]; then
          docker tag ghcr.io/${{ github.repository }}/intel/dlstreamer-pipeline-server:latest-${{ matrix.ubuntu_version }} ghcr.io/${{ github.repository }}/intel/dlstreamer-pipeline-server:latest
          docker push ghcr.io/${{ github.repository }}/intel/dlstreamer-pipeline-server:latest
        fi
        docker push ghcr.io/${{ github.repository }}/intel/dlstreamer-pipeline-server:latest-${{ matrix.ubuntu_version }}

    - name: Clean up
      if: always()
      run: |
        rm -rf edge-ai-libraries-repo
        docker rmi ghcr.io/${{ github.repository }}/intel/dlstreamer-pipeline-server:latest-${{ matrix.ubuntu_version }} ghcr.io/${{ github.repository }}/intel/dlstreamer-pipeline-server:latest || true

