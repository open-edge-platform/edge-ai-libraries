#
# Apache v2 license
# Copyright (C) 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
#
name: "[Time Series] CodeQL Scan"
run-name: "[Time Series Analytics] CodeQL Scan workflow (by @${{ github.actor }} via ${{ github.event_name }})"
on:
  workflow_dispatch:


jobs:
  codeql-job:
    name: Scan Python
    # Consider using larger runners or machines with greater resources for possible analysis time improvements.
    runs-on: ubuntu-24.04
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          persist-credentials: false 

      - name: Initialize CodeQL
        uses: github/codeql-action/init@ff0a06e83cb2de871e5a09832bc6a81e7276941f # v3.28.18
        with:
          languages: 'python'
          source-root: microservices/time-series-analytics

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@ff0a06e83cb2de871e5a09832bc6a81e7276941f # v3.28.18
        with:
          category: "/language:python"
          upload: "never"
          output: results

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install reportlab

      - name: Convert SARIF to PDF
        run: |
          python - <<EOF
          import json
          from reportlab.lib.pagesizes import letter
          from reportlab.pdfgen import canvas

          def parse_sarif(sarif_file):
              with open(sarif_file, 'r') as file:
                  data = json.load(file)
              return data

          def generate_pdf(data, output_file):
              c = canvas.Canvas(output_file, pagesize=letter)
              width, height = letter

              c.drawString(100, height - 100, "SARIF Report")
              y_position = height - 150

              for run in data.get('runs', []):
                  for result in run.get('results', []):
                      message = result.get('message', {}).get('text', 'No message')
                      severity = result.get('level', 'Unknown')
                      location = result.get('locations', [{}])[0].get('physicalLocation', {}).get('artifactLocation', {}).get('uri', 'Unknown location')

                      c.drawString(100, y_position, f"Message: {message}")
                      c.drawString(100, y_position - 20, f"Severity: {severity}")
                      c.drawString(100, y_position - 40, f"Location: {location}")
                      y_position -= 80

                      if y_position < 100:
                          c.showPage()
                          y_position = height - 100

              c.save()

          sarif_data = parse_sarif('results/python.sarif')
          generate_pdf(sarif_data, 'sarif_report.pdf')
          EOF

      - name: Create ZIP File
        run: |
          zip codeql_reports.zip results/python.sarif sarif_report.pdf

      - name: Upload ZIP Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Time Series CodeQL Reports
          path: codeql_reports.zip