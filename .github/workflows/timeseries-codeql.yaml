#
# Apache v2 license
# Copyright (C) 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
#
name: "[Time Series] CodeQL Scan"
run-name: "[Time Series Analytics] CodeQL Scan workflow (by @${{ github.actor }} via ${{ github.event_name }})"
on:
  workflow_dispatch:


jobs:
  codeql-job:
    name: Scan Python
    # Consider using larger runners or machines with greater resources for possible analysis time improvements.
    runs-on: ubuntu-24.04
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          persist-credentials: false 

      - name: Initialize CodeQL
        uses: github/codeql-action/init@ff0a06e83cb2de871e5a09832bc6a81e7276941f # v3.28.18
        with:
          languages: 'python'
          source-root: microservices/time-series-analytics

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@ff0a06e83cb2de871e5a09832bc6a81e7276941f # v3.28.18
        with:
          category: "/language:python"
          upload: "never"
          output: results

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install reportlab

      - name: Convert SARIF to PDF
        run: |
          python - <<EOF
          import json
          from reportlab.lib.pagesizes import letter
          from reportlab.pdfgen import canvas

          def parse_sarif(sarif_file):
              with open(sarif_file, 'r') as file:
                  data = json.load(file)
              return data

          def generate_pdf(data, output_file):
              c = canvas.Canvas(output_file, pagesize=letter)
              width, height = letter

              c.drawString(100, height - 100, "SARIF Report")
              y_position = height - 150

              for run in data.get('runs', []):
                  for result in run.get('results', []):
                      message = result.get('message', {}).get('text', 'No message')
                      severity = result.get('level', 'Unknown')
                      location = result.get('locations', [{}])[0].get('physicalLocation', {}).get('artifactLocation', {}).get('uri', 'Unknown location')

                      c.drawString(100, y_position, f"Message: {message}")
                      c.drawString(100, y_position - 20, f"Severity: {severity}")
                      c.drawString(100, y_position - 40, f"Location: {location}")
                      y_position -= 80

                      if y_position < 100:
                          c.showPage()
                          y_position = height - 100

              c.save()

          sarif_data = parse_sarif('results/python.sarif')
          generate_pdf(sarif_data, 'sarif_report.pdf')
          EOF

      - name: Create ZIP File
        run: |
          zip codeql_reports.zip results/python.sarif sarif_report.pdf

      - name: Upload ZIP Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Time Series CodeQL Reports
          path: codeql_reports.zip

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Python + HTML-to-PDF dependencies
        run: |
          sudo apt update
          sudo apt install -y libpango-1.0-0 libpangocairo-1.0-0 libcairo2
          pip install weasyprint jinja2

      - name: Convert SARIF to PDF (inline Python)
        run: |
          cat <<EOF > template.html
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <title>CodeQL Report</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; }
                  h1 { color: #333; }
                  .issue { margin-bottom: 20px; padding: 10px; border: 1px solid #ccc; border-left: 5px solid #007ACC; }
                  .rule { font-weight: bold; }
                  .level { font-style: italic; color: #666; }
                  .location { color: #007ACC; }
                  .message { margin-top: 5px; }
              </style>
          </head>
          <body>
              <h1>CodeQL Scan Report</h1>
              {% for issue in issues %}
              <div class="issue">
                  <div class="rule">Rule: {{ issue.rule_id }}</div>
                  <div class="level">Level: {{ issue.level }}</div>
                  <div class="location">Location: {{ issue.location }}</div>
                  <div class="message">{{ issue.message }}</div>
              </div>
              {% endfor %}
          </body>
          </html>
          EOF

          python3 - <<EOF
          import json
          from jinja2 import Environment, FileSystemLoader
          from weasyprint import HTML

          with open("results/python.sarif") as f:
              data = json.load(f)

          issues = []
          for run in data.get("runs", []):
              for result in run.get("results", []):
                  msg = result.get("message", {}).get("text", "No message")
                  rule_id = result.get("ruleId", "Unknown rule")
                  level = result.get("level", "warning")
                  location = "Unknown"
                  if result.get("locations"):
                      loc = result["locations"][0]
                      uri = loc.get("physicalLocation", {}).get("artifactLocation", {}).get("uri", "Unknown")
                      line = loc.get("physicalLocation", {}).get("region", {}).get("startLine", "Unknown")
                      location = f"{uri} (Line {line})"
                  issues.append({
                      "message": msg,
                      "rule_id": rule_id,
                      "level": level,
                      "location": location
                  })

          env = Environment(loader=FileSystemLoader("."))
          template = env.get_template("template.html")
          html_out = template.render(issues=issues)

          HTML(string=html_out).write_pdf("codeql-report.pdf")
          EOF

      - name: Upload PDF Report
        uses: actions/upload-artifact@v4
        with:
          name: codeql-pdf-report
          path: codeql-report.pdf